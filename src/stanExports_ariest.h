// Generated by rstantools.  Do not edit by hand.

/*
    tatum is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    tatum is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with tatum.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_ariest_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 54> locations_array__ =
  {" (found before start of program)",
  " (in 'ariest', line 18, column 2 to column 24)",
  " (in 'ariest', line 19, column 2 to column 20)",
  " (in 'ariest', line 20, column 2 to column 37)",
  " (in 'ariest', line 23, column 2 to column 35)",
  " (in 'ariest', line 24, column 2 to column 60)",
  " (in 'ariest', line 27, column 4 to line 28, column 29)",
  " (in 'ariest', line 26, column 16 to line 29, column 3)",
  " (in 'ariest', line 26, column 2 to line 29, column 3)",
  " (in 'ariest', line 31, column 4 to line 33, column 44)",
  " (in 'ariest', line 35, column 6 to line 37, column 46)",
  " (in 'ariest', line 34, column 17 to line 38, column 5)",
  " (in 'ariest', line 34, column 4 to line 38, column 5)",
  " (in 'ariest', line 30, column 15 to line 39, column 3)",
  " (in 'ariest', line 30, column 2 to line 39, column 3)",
  " (in 'ariest', line 47, column 8 to column 59)",
  " (in 'ariest', line 46, column 13 to line 48, column 7)",
  " (in 'ariest', line 45, column 8 to column 48)",
  " (in 'ariest', line 44, column 14 to line 46, column 7)",
  " (in 'ariest', line 44, column 6 to line 48, column 7)",
  " (in 'ariest', line 43, column 24 to line 49, column 5)",
  " (in 'ariest', line 43, column 4 to line 49, column 5)",
  " (in 'ariest', line 42, column 20 to line 51, column 3)",
  " (in 'ariest', line 42, column 2 to line 51, column 3)",
  " (in 'ariest', line 55, column 2 to column 38)",
  " (in 'ariest', line 56, column 2 to column 34)",
  " (in 'ariest', line 57, column 2 to column 37)",
  " (in 'ariest', line 59, column 2 to column 63)",
  " (in 'ariest', line 3, column 2 to column 8)",
  " (in 'ariest', line 4, column 2 to column 8)",
  " (in 'ariest', line 5, column 2 to column 13)",
  " (in 'ariest', line 6, column 11 to column 17)",
  " (in 'ariest', line 6, column 2 to column 19)",
  " (in 'ariest', line 7, column 2 to column 15)",
  " (in 'ariest', line 8, column 14 to column 22)",
  " (in 'ariest', line 8, column 2 to column 24)",
  " (in 'ariest', line 9, column 8 to column 14)",
  " (in 'ariest', line 9, column 15 to column 23)",
  " (in 'ariest', line 9, column 2 to column 25)",
  " (in 'ariest', line 10, column 8 to column 14)",
  " (in 'ariest', line 10, column 15 to column 23)",
  " (in 'ariest', line 10, column 2 to column 25)",
  " (in 'ariest', line 11, column 9 to column 10)",
  " (in 'ariest', line 11, column 2 to column 12)",
  " (in 'ariest', line 13, column 2 to column 14)",
  " (in 'ariest', line 13, column 15 to column 37)",
  " (in 'ariest', line 14, column 2 to column 14)",
  " (in 'ariest', line 14, column 15 to column 37)",
  " (in 'ariest', line 15, column 2 to column 16)",
  " (in 'ariest', line 15, column 17 to column 41)",
  " (in 'ariest', line 23, column 9 to column 10)",
  " (in 'ariest', line 23, column 11 to column 12)",
  " (in 'ariest', line 24, column 10 to column 16)",
  " (in 'ariest', line 24, column 17 to column 25)"};
#include <stan_meta_header.hpp>
class model_ariest final : public model_base_crtp<model_ariest> {
private:
  int T;
  int A;
  int NT_obs;
  std::vector<int> ObsT;
  int NAge_obs;
  std::vector<int> AgeTops;
  std::vector<std::vector<int>> N;
  std::vector<std::vector<int>> K;
  std::vector<double> R;
  double ari_mu;
  double ari_sig;
  double rho_mu;
  double rho_sig;
  double alpha_mu;
  double alpha_sig;
public:
  ~model_ariest() {}
  model_ariest(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_ariest_namespace::model_ariest";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 28;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      current_statement__ = 28;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 29;
      context__.validate_dims("data initialization", "A", "int",
        std::vector<size_t>{});
      A = std::numeric_limits<int>::min();
      current_statement__ = 29;
      A = context__.vals_i("A")[(1 - 1)];
      current_statement__ = 30;
      context__.validate_dims("data initialization", "NT_obs", "int",
        std::vector<size_t>{});
      NT_obs = std::numeric_limits<int>::min();
      current_statement__ = 30;
      NT_obs = context__.vals_i("NT_obs")[(1 - 1)];
      current_statement__ = 31;
      stan::math::validate_non_negative_index("ObsT", "NT_obs", NT_obs);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "ObsT", "int",
        std::vector<size_t>{static_cast<size_t>(NT_obs)});
      ObsT = std::vector<int>(NT_obs, std::numeric_limits<int>::min());
      current_statement__ = 32;
      ObsT = context__.vals_i("ObsT");
      current_statement__ = 33;
      context__.validate_dims("data initialization", "NAge_obs", "int",
        std::vector<size_t>{});
      NAge_obs = std::numeric_limits<int>::min();
      current_statement__ = 33;
      NAge_obs = context__.vals_i("NAge_obs")[(1 - 1)];
      current_statement__ = 34;
      stan::math::validate_non_negative_index("AgeTops", "NAge_obs", NAge_obs);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "AgeTops", "int",
        std::vector<size_t>{static_cast<size_t>(NAge_obs)});
      AgeTops = std::vector<int>(NAge_obs, std::numeric_limits<int>::min());
      current_statement__ = 35;
      AgeTops = context__.vals_i("AgeTops");
      current_statement__ = 36;
      stan::math::validate_non_negative_index("N", "NT_obs", NT_obs);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("N", "NAge_obs", NAge_obs);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{static_cast<size_t>(NT_obs),
          static_cast<size_t>(NAge_obs)});
      N = std::vector<std::vector<int>>(NT_obs,
            std::vector<int>(NAge_obs, std::numeric_limits<int>::min()));
      {
        std::vector<int> N_flat__;
        current_statement__ = 38;
        N_flat__ = context__.vals_i("N");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= NAge_obs; ++sym1__) {
          current_statement__ = 38;
          for (int sym2__ = 1; sym2__ <= NT_obs; ++sym2__) {
            current_statement__ = 38;
            stan::model::assign(N, N_flat__[(pos__ - 1)],
              "assigning variable N", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 38;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("K", "NT_obs", NT_obs);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("K", "NAge_obs", NAge_obs);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{static_cast<size_t>(NT_obs),
          static_cast<size_t>(NAge_obs)});
      K = std::vector<std::vector<int>>(NT_obs,
            std::vector<int>(NAge_obs, std::numeric_limits<int>::min()));
      {
        std::vector<int> K_flat__;
        current_statement__ = 41;
        K_flat__ = context__.vals_i("K");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= NAge_obs; ++sym1__) {
          current_statement__ = 41;
          for (int sym2__ = 1; sym2__ <= NT_obs; ++sym2__) {
            current_statement__ = 41;
            stan::model::assign(K, K_flat__[(pos__ - 1)],
              "assigning variable K", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 41;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 42;
      stan::math::validate_non_negative_index("R", "A", A);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "R", "double",
        std::vector<size_t>{static_cast<size_t>(A)});
      R = std::vector<double>(A, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 43;
      R = context__.vals_r("R");
      current_statement__ = 44;
      context__.validate_dims("data initialization", "ari_mu", "double",
        std::vector<size_t>{});
      ari_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 44;
      ari_mu = context__.vals_r("ari_mu")[(1 - 1)];
      current_statement__ = 45;
      context__.validate_dims("data initialization", "ari_sig", "double",
        std::vector<size_t>{});
      ari_sig = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 45;
      ari_sig = context__.vals_r("ari_sig")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "ari_sig", ari_sig, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "rho_mu", "double",
        std::vector<size_t>{});
      rho_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 46;
      rho_mu = context__.vals_r("rho_mu")[(1 - 1)];
      current_statement__ = 47;
      context__.validate_dims("data initialization", "rho_sig", "double",
        std::vector<size_t>{});
      rho_sig = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 47;
      rho_sig = context__.vals_r("rho_sig")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "rho_sig", rho_sig, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "alpha_mu", "double",
        std::vector<size_t>{});
      alpha_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 48;
      alpha_mu = context__.vals_r("alpha_mu")[(1 - 1)];
      current_statement__ = 49;
      context__.validate_dims("data initialization", "alpha_sig", "double",
        std::vector<size_t>{});
      alpha_sig = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 49;
      alpha_sig = context__.vals_r("alpha_sig")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "alpha_sig", alpha_sig,
        0);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("f", "T", T);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("f", "A", A);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("fs", "NT_obs", NT_obs);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("fs", "NAge_obs", NAge_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_ariest";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_ariest_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ lambda0 = DUMMY_VAR__;
      current_statement__ = 1;
      lambda0 = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 2;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 3;
      alpha = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(-1e-1, 1e-1, lp__);
      std::vector<std::vector<local_scalar_t__>> f =
        std::vector<std::vector<local_scalar_t__>>(T,
          std::vector<local_scalar_t__>(A, DUMMY_VAR__));
      current_statement__ = 4;
      stan::model::assign(f, stan::math::rep_array(0.0, T, A),
        "assigning variable f");
      std::vector<std::vector<local_scalar_t__>> fs =
        std::vector<std::vector<local_scalar_t__>>(NT_obs,
          std::vector<local_scalar_t__>(NAge_obs, DUMMY_VAR__));
      current_statement__ = 5;
      stan::model::assign(fs, stan::math::rep_array(0.0, NT_obs, NAge_obs),
        "assigning variable fs");
      current_statement__ = 8;
      for (int i = 1; i <= A; ++i) {
        current_statement__ = 6;
        stan::model::assign(f, (((1 -
          stan::math::exp(
            (-((stan::model::rvalue(R, "R", stan::model::index_uni(i)) *
            lambda0) + rho) * (i - 0.5)))) * rho) /
          ((stan::model::rvalue(R, "R", stan::model::index_uni(i)) * lambda0)
          + rho)), "assigning variable f", stan::model::index_uni(1),
          stan::model::index_uni(i));
      }
      current_statement__ = 14;
      for (int i = 2; i <= T; ++i) {
        current_statement__ = 9;
        stan::model::assign(f,
          (stan::math::exp((-lambda0 * stan::math::exp((-alpha * (i - 1)))))
          + ((rho / (((stan::model::rvalue(R, "R", stan::model::index_uni(1))
          * lambda0) * stan::math::exp((-alpha * (i - 1)))) + rho)) * (1 -
          stan::math::exp((-lambda0 * stan::math::exp((-alpha * (i - 1)))))))),
          "assigning variable f", stan::model::index_uni(i),
          stan::model::index_uni(1));
        current_statement__ = 12;
        for (int j = 2; j <= A; ++j) {
          current_statement__ = 10;
          stan::model::assign(f,
            ((stan::model::rvalue(f, "f", stan::model::index_uni((i - 1)),
                stan::model::index_uni((j - 1))) *
            stan::math::exp((-lambda0 * stan::math::exp((-alpha * (i - 1))))))
            + ((rho /
            (((stan::model::rvalue(R, "R", stan::model::index_uni(j)) *
            lambda0) * stan::math::exp((-alpha * (i - 1)))) + rho)) * (1 -
            stan::math::exp((-lambda0 * stan::math::exp((-alpha * (i - 1)))))))),
            "assigning variable f", stan::model::index_uni(i),
            stan::model::index_uni(j));
        }
      }
      current_statement__ = 23;
      for (int i = 1; i <= NT_obs; ++i) {
        current_statement__ = 21;
        for (int j = 1; j <= NAge_obs; ++j) {
          current_statement__ = 19;
          if (stan::math::logical_eq(j, 1)) {
            current_statement__ = 17;
            stan::model::assign(fs,
              stan::math::mean(
                stan::model::rvalue(f, "f",
                  stan::model::index_uni(
                    stan::model::rvalue(ObsT, "ObsT",
                      stan::model::index_uni(i))),
                  stan::model::index_min_max(1,
                    stan::model::rvalue(AgeTops, "AgeTops",
                      stan::model::index_uni(j))))), "assigning variable fs",
              stan::model::index_uni(i), stan::model::index_uni(j));
          } else {
            current_statement__ = 15;
            stan::model::assign(fs,
              stan::math::mean(
                stan::model::rvalue(f, "f",
                  stan::model::index_uni(
                    stan::model::rvalue(ObsT, "ObsT",
                      stan::model::index_uni(i))),
                  stan::model::index_min_max(
                    stan::model::rvalue(AgeTops, "AgeTops",
                      stan::model::index_uni((j - 1))),
                    stan::model::rvalue(AgeTops, "AgeTops",
                      stan::model::index_uni(j))))), "assigning variable fs",
              stan::model::index_uni(i), stan::model::index_uni(j));
          }
        }
      }
      {
        current_statement__ = 24;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(lambda0, ari_mu,
                         ari_sig));
        current_statement__ = 25;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(rho, rho_mu,
                         rho_sig));
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, alpha_mu,
                         alpha_sig));
        current_statement__ = 27;
        lp_accum__.add(stan::math::binomial_lpmf<propto__>(
                         stan::math::to_array_1d(K),
                         stan::math::to_array_1d(N),
                         stan::math::to_array_1d(fs)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_ariest_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double lambda0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      lambda0 = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      alpha = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(-1e-1, 1e-1, lp__);
      std::vector<std::vector<double>> f =
        std::vector<std::vector<double>>(T,
          std::vector<double>(A, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> fs =
        std::vector<std::vector<double>>(NT_obs,
          std::vector<double>(NAge_obs,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(lambda0);
      out__.write(rho);
      out__.write(alpha);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 4;
      stan::model::assign(f, stan::math::rep_array(0.0, T, A),
        "assigning variable f");
      current_statement__ = 5;
      stan::model::assign(fs, stan::math::rep_array(0.0, NT_obs, NAge_obs),
        "assigning variable fs");
      current_statement__ = 8;
      for (int i = 1; i <= A; ++i) {
        current_statement__ = 6;
        stan::model::assign(f, (((1 -
          stan::math::exp(
            (-((stan::model::rvalue(R, "R", stan::model::index_uni(i)) *
            lambda0) + rho) * (i - 0.5)))) * rho) /
          ((stan::model::rvalue(R, "R", stan::model::index_uni(i)) * lambda0)
          + rho)), "assigning variable f", stan::model::index_uni(1),
          stan::model::index_uni(i));
      }
      current_statement__ = 14;
      for (int i = 2; i <= T; ++i) {
        current_statement__ = 9;
        stan::model::assign(f,
          (stan::math::exp((-lambda0 * stan::math::exp((-alpha * (i - 1)))))
          + ((rho / (((stan::model::rvalue(R, "R", stan::model::index_uni(1))
          * lambda0) * stan::math::exp((-alpha * (i - 1)))) + rho)) * (1 -
          stan::math::exp((-lambda0 * stan::math::exp((-alpha * (i - 1)))))))),
          "assigning variable f", stan::model::index_uni(i),
          stan::model::index_uni(1));
        current_statement__ = 12;
        for (int j = 2; j <= A; ++j) {
          current_statement__ = 10;
          stan::model::assign(f,
            ((stan::model::rvalue(f, "f", stan::model::index_uni((i - 1)),
                stan::model::index_uni((j - 1))) *
            stan::math::exp((-lambda0 * stan::math::exp((-alpha * (i - 1))))))
            + ((rho /
            (((stan::model::rvalue(R, "R", stan::model::index_uni(j)) *
            lambda0) * stan::math::exp((-alpha * (i - 1)))) + rho)) * (1 -
            stan::math::exp((-lambda0 * stan::math::exp((-alpha * (i - 1)))))))),
            "assigning variable f", stan::model::index_uni(i),
            stan::model::index_uni(j));
        }
      }
      current_statement__ = 23;
      for (int i = 1; i <= NT_obs; ++i) {
        current_statement__ = 21;
        for (int j = 1; j <= NAge_obs; ++j) {
          current_statement__ = 19;
          if (stan::math::logical_eq(j, 1)) {
            current_statement__ = 17;
            stan::model::assign(fs,
              stan::math::mean(
                stan::model::rvalue(f, "f",
                  stan::model::index_uni(
                    stan::model::rvalue(ObsT, "ObsT",
                      stan::model::index_uni(i))),
                  stan::model::index_min_max(1,
                    stan::model::rvalue(AgeTops, "AgeTops",
                      stan::model::index_uni(j))))), "assigning variable fs",
              stan::model::index_uni(i), stan::model::index_uni(j));
          } else {
            current_statement__ = 15;
            stan::model::assign(fs,
              stan::math::mean(
                stan::model::rvalue(f, "f",
                  stan::model::index_uni(
                    stan::model::rvalue(ObsT, "ObsT",
                      stan::model::index_uni(i))),
                  stan::model::index_min_max(
                    stan::model::rvalue(AgeTops, "AgeTops",
                      stan::model::index_uni((j - 1))),
                    stan::model::rvalue(AgeTops, "AgeTops",
                      stan::model::index_uni(j))))), "assigning variable fs",
              stan::model::index_uni(i), stan::model::index_uni(j));
          }
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            out__.write(f[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= NAge_obs; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= NT_obs; ++sym2__) {
            out__.write(fs[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ lambda0 = DUMMY_VAR__;
      current_statement__ = 1;
      lambda0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lambda0);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 2;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, rho);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 3;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lub(-1e-1, 1e-1, alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "lambda0",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "rho", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ lambda0 = DUMMY_VAR__;
      current_statement__ = 1;
      lambda0 = context__.vals_r("lambda0")[(1 - 1)];
      out__.write_free_lb(0, lambda0);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 2;
      rho = context__.vals_r("rho")[(1 - 1)];
      out__.write_free_lb(0, rho);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 3;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write_free_lub(-1e-1, 1e-1, alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"lambda0", "rho", "alpha"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"f", "fs"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(A)},
             std::vector<size_t>{static_cast<size_t>(NT_obs),
               static_cast<size_t>(NAge_obs)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "lambda0");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "alpha");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "f" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= NAge_obs; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NT_obs; ++sym2__) {
          param_names__.emplace_back(std::string() + "fs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "lambda0");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "alpha");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "f" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= NAge_obs; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NT_obs; ++sym2__) {
          param_names__.emplace_back(std::string() + "fs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"lambda0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(A) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"fs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(NT_obs) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(NAge_obs) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"lambda0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(A) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"fs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(NT_obs) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(NAge_obs) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((T * A) +
      (NT_obs * NAge_obs)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((T * A) +
      (NT_obs * NAge_obs)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ariest_namespace::model_ariest;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ariest_namespace::profiles__;
}
#endif
#endif
